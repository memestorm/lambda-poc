version: '3.8'

services:
  # Local SQS service using ElasticMQ
  sqs:
    image: softwaremill/elasticmq-native:1.5.7
    ports:
      - "9324:9324"
      - "9325:9325"
    volumes:
      - ./elasticmq.conf:/opt/elasticmq.conf
    networks:
      - consensus-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9324/"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Lambda Node 1
  lambda-1:
    build: .
    ports:
      - "9001:8080"
    environment:
      - NODE_ID=lambda-1
      - SQS_ENDPOINT=http://sqs:9324
      - KNOWN_NODES=lambda-1,lambda-2,lambda-3,lambda-4,lambda-5
      - LOG_LEVEL=INFO
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      sqs:
        condition: service_started
    networks:
      - consensus-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Lambda Node 2
  lambda-2:
    build: .
    ports:
      - "9002:8080"
    environment:
      - NODE_ID=lambda-2
      - SQS_ENDPOINT=http://sqs:9324
      - KNOWN_NODES=lambda-1,lambda-2,lambda-3,lambda-4,lambda-5
      - LOG_LEVEL=INFO
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      sqs:
        condition: service_started
    networks:
      - consensus-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Lambda Node 3
  lambda-3:
    build: .
    ports:
      - "9003:8080"
    environment:
      - NODE_ID=lambda-3
      - SQS_ENDPOINT=http://sqs:9324
      - KNOWN_NODES=lambda-1,lambda-2,lambda-3,lambda-4,lambda-5
      - LOG_LEVEL=INFO
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      sqs:
        condition: service_started
    networks:
      - consensus-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Lambda Node 4
  lambda-4:
    build: .
    ports:
      - "9004:8080"
    environment:
      - NODE_ID=lambda-4
      - SQS_ENDPOINT=http://sqs:9324
      - KNOWN_NODES=lambda-1,lambda-2,lambda-3,lambda-4,lambda-5
      - LOG_LEVEL=INFO
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      sqs:
        condition: service_started
    networks:
      - consensus-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Lambda Node 5
  lambda-5:
    build: .
    ports:
      - "9005:8080"
    environment:
      - NODE_ID=lambda-5
      - SQS_ENDPOINT=http://sqs:9324
      - KNOWN_NODES=lambda-1,lambda-2,lambda-3,lambda-4,lambda-5
      - LOG_LEVEL=INFO
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      sqs:
        condition: service_started
    networks:
      - consensus-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "/usr/local/bin/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Trigger Service
  trigger-service:
    build:
      context: .
      dockerfile: Dockerfile.trigger
    environment:
      - SQS_ENDPOINT=http://sqs:9324
      - LAMBDA_ENDPOINTS=http://lambda-1:8080,http://lambda-2:8080,http://lambda-3:8080,http://lambda-4:8080,http://lambda-5:8080
      - TRIGGER_INTERVAL_MIN=5
      - TRIGGER_INTERVAL_MAX=30
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    depends_on:
      - sqs
      - lambda-1
      - lambda-2
      - lambda-3
      - lambda-4
      - lambda-5
    networks:
      - consensus-network

networks:
  consensus-network:
    driver: bridge